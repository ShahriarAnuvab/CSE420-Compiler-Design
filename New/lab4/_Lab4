{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"WCDupltRoSvq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1693275935755,"user_tz":-360,"elapsed":53097,"user":{"displayName":"MISHKAT SULTANA","userId":"14389123653742766440"}},"outputId":"08383594-0be3-4f0f-9ca2-0533130b9b7c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Enter your string id*+id*id\n"," Matched            Stack               Input               Action              \n","-------------------------------------------------------------------\n","                    E$                  id*+id*id$                              \n","                    TE'$                id*+id*id$          E ==> TE'           \n","                    FT'E'$              id*+id*id$          T ==> FT'           \n","                    idT'E'$             id*+id*id$          F ==> id            \n","id                  T'E'$               *+id*id$            match id            \n","id                  *FT'E'$             *+id*id$            T' ==> *FT'         \n","id*                 FT'E'$              +id*id$             match *             \n","id*                 T'E'$               +id*id$             F ==> synch         \n","id*                 E'$                 +id*id$             T' ==> epsilon      \n","id*                 +TE'$               +id*id$             E' ==> +TE'         \n","id*+                TE'$                id*id$              match +             \n","id*+                FT'E'$              id*id$              T ==> FT'           \n","id*+                idT'E'$             id*id$              F ==> id            \n","id*+id              T'E'$               *id$                match id            \n","id*+id              *FT'E'$             *id$                T' ==> *FT'         \n","id*+id*             FT'E'$              id$                 match *             \n","id*+id*             idT'E'$             id$                 F ==> id            \n","id*+id*id           T'E'$               $                   match id            \n","id*+id*id           E'$                 $                   T' ==> epsilon      \n","id*+id*id           $                   $                   E' ==> epsilon      \n","\n","Parsing Successful\n"]}],"source":["class ParseStack:\n","    def __init__(self):\n","        self.stack_items = []\n","\n","    def push(self, item):\n","        self.stack_items.append(item)\n","\n","    def pop(self):\n","        if not self.is_empty():\n","            return self.stack_items.pop()\n","\n","    def peek(self):\n","        if not self.is_empty():\n","            return self.stack_items[-1]\n","\n","    def is_empty(self):\n","        return len(self.stack_items) == 0\n","\n","    def size(self):\n","        return len(self.stack_items)\n","\n","parse_stack = ParseStack()\n","\n","terminals = [\"id\", \"*\", \"+\", \"(\", \")\", \"$\"]\n","production_rules = {\n","    \"id\": {\"E\": \"TE'\", \"T\": \"FT'\", \"F\": \"id\"},\n","    \"+\": {\"E'\": \"+TE'\", \"T'\": \"epsilon\",\"T\": \"synch\", \"F\": \"synch\"},\n","    \"*\": {\"T'\": \"*FT'\", \"F\": \"synch\"},\n","    \"(\": {\"E\": \"TE'\", \"T\": \"FT'\", \"F\": \"(E)\"},\n","    \")\": {\"E'\": \"epsilon\", \"T'\": \"epsilon\",\"E\": \"synch\",\"T\": \"synch\",\"F\": \"synch\"},\n","    \"$\": {\"E'\": \"epsilon\", \"T'\": \"epsilon\",\"E\": \"synch\",\"T\": \"synch\",\"F\": \"synch\"}\n","}\n","\n","input_string = str(input(\"Enter your string \")).lower()\n","input_string += \"$\"\n","input_tokens = []\n","\n","while input_string:\n","    for term in terminals:\n","        if input_string.startswith(term):\n","            input_tokens.append(term)\n","            input_string = input_string[len(term):]\n","            break\n","\n","parse_stack.push(\"$\")\n","parse_stack.push(\"E\")\n","input_pointer = 0\n","\n","matched_tokens = []\n","print(f\"{' Matched':<20}{'Stack':<20}{'Input':<20}{'Action':<20}\")\n","print(\"-------------------------------------------------------------------\")\n","print(f\"{'':<20}{''.join(reversed(parse_stack.stack_items)):<20}{''.join(input_tokens[input_pointer:]):<20}{'':<20}\")\n","\n","while True:\n","    x = parse_stack.peek()\n","    a = input_tokens[input_pointer]\n","\n","    if x in terminals or x == \"$\":\n","        if x == a:\n","            if x == \"$\":\n","                print()\n","                print(\"Parsing Successful\")\n","                break\n","            parse_stack.pop()\n","            matched_tokens.append(a)\n","            print(f\"{''.join(matched_tokens):<20}{''.join(reversed(parse_stack.stack_items)):<20}{''.join(input_tokens[input_pointer+1:]):<20}{'match ' + a:<20}\")\n","            input_pointer += 1\n","        else:\n","            parse_stack.pop()\n","    else:\n","        if production_rules[a][x] != \"\":\n","            rule = production_rules[a][x]\n","            q = parse_stack.pop()\n","\n","            if rule in terminals:\n","                parse_stack.push(rule)\n","                print(f\"{''.join(matched_tokens):<20}{''.join(reversed(parse_stack.stack_items)):<20}{''.join(input_tokens[input_pointer:]):<20}{q + ' ==> ' + rule:<20}\")\n","            elif rule == \"epsilon\":\n","                print(f\"{''.join(matched_tokens):<20}{''.join(reversed(parse_stack.stack_items)):<20}{''.join(input_tokens[input_pointer:]):<20}{q + ' ==> ' + rule:<20}\")\n","                pass\n","            elif rule == \"synch\":\n","                print(f\"{''.join(matched_tokens):<20}{''.join(reversed(parse_stack.stack_items)):<20}{''.join(input_tokens[input_pointer:]):<20}{q + ' ==> ' + rule:<20}\")\n","                pass\n","            else:\n","                i = len(rule) - 1\n","                while i >= 0:\n","                    if rule[i] == \"'\":\n","                        combined_symbol = rule[i - 1] + rule[i]\n","                        parse_stack.push(combined_symbol)\n","                        i -= 2\n","                    else:\n","                        parse_stack.push(rule[i])\n","                        i -= 1\n","                print(f\"{''.join(matched_tokens):<20}{''.join(reversed(parse_stack.stack_items)):<20}{''.join(input_tokens[input_pointer:]):<20}{q + ' ==> ' + rule:<20}\")\n","        else:\n","            input_pointer += 1\n"]},{"cell_type":"code","source":[],"metadata":{"id":"fl8URJOax-vN"},"execution_count":null,"outputs":[]}]}